{"version":3,"sources":["components/Player.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Player","state","className","componentDidMount","setTimeout","setState","props","id","addEventListener","e","key","preventDefault","index","parseInt","nextPlayer","document","querySelector","focus","firstRoll","createFrames","rolls","map","roll","i","name","type","value","onChange","handleUpdateRoll","ref","input","autoAdvance","determineNextFocus","target","toUpperCase","sumFrames","nonBonusFramesCount","message","rollsAsStrings","rollsAsNumbers","match","rollsAsNumbersWithoutNulls","filter","filterOutNulls","slice","length","extraPoints","forEach","char","nonBonusRolls","reduce","sum","current","sumAllFrames","framesToCount","directFocusToChild","querySelectorAll","push","nextRollIndex","lastNumber","ids","split","rollIndex","playerIndex","determineNextFocusLastFrame","click","handleDeletePlayer","console","log","React","version","this","onClick","playerName","handleNameChange","placeholder","autoFocus","clearScore","unused","sumFramesFunction","Component","_","require","Game","makeAllRolls","newPlayer","Math","random","players","cloneDeep","in","display","handleAddPlayer","playersCopy","splice","isAcceptableRollInput","addPlayerButton","toggleAutoAdvance","checked","player","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b7a6cb1.chunk.js","sourcesContent":["import React from 'react'\n// import {URL, HEADERS} from '../constants'\n\nexport default class Player extends React.Component{\n\n  state = {\n    className:'player off'\n  }\n\n  componentDidMount = () => { // takes user through all nameInputs and then to the game\n    setTimeout(()=>this.setState({className: 'player'}), 1)\n    this[`name-${this.props.id}`].addEventListener('keydown',e =>{\n      if(e.key===\"Tab\" || e.key===\"Enter\"){\n        e.preventDefault()\n        const index = parseInt(this.props.id)\n        const nextPlayer = document.querySelector(`#name-${index + 1}`)\n        if(nextPlayer){nextPlayer.focus()}\n        else{\n          const firstRoll = document.querySelector(\"#roll-0-0\")\n          if(firstRoll){firstRoll.focus()}\n        }\n      }\n    })\n  }\n\n  id = (index) => `${this.props.id}-${index}` // important for good .focus()\n\n  createFrames = () => { // makes input (wrapped in span) for each throw/roll\n    return this.props.rolls.map( (roll,i) =>{\n      return <span className='roll' key={this.id(i)}>\n        <input id={`roll-${this.id(i)}`} key={this.id(i)} name='roll' type='text' value={this.props.rolls[i]} \n        onChange={this.handleUpdateRoll} ref={input => this[`roll-${this.id(i)}`] = input} \n        // disabled={( (this.props.rolls[i-1]==='X' && i<19)) ? true : false} \n        // placeholder={this.id(i)}\n        />\n      </span>\n    })\n  }\n\n  handleUpdateRoll = (e) => { // yesssss! Only changes focus if input is accepted && autoAdvance is on\n    if(this.props.handleUpdateRoll(e) && this.props.autoAdvance){\n      this.determineNextFocus(e, e.target.value.toUpperCase())\n    }\n  }\n\n  sumFrames = (nonBonusFramesCount = 20, message = 'Start Game') => {\n    const rollsAsStrings = [...this.props.rolls]\n    const rollsAsNumbers = rollsAsStrings.map((roll,i)=>{\n      if(roll.match(/[0-9]/)){return parseInt(roll)}\n      else if(roll==='X'){return 10}\n      else if(roll==='/'){return (10 - parseInt(rollsAsStrings[i-1]))}\n      else{return null} // removes other characters\n    })\n    const rollsAsNumbersWithoutNulls = rollsAsNumbers.filter(filterOutNulls) // WithoutNulls versions allow easy traversal for spare and strike bonus points\n\n    if(rollsAsNumbers.slice(0,nonBonusFramesCount).filter(filterOutNulls).length > 0){ \n\n      let extraPoints = 0 \n      rollsAsStrings.slice(0,nonBonusFramesCount).filter(filterOutNulls).forEach((char,i) => {\n        if(char==='X'){\n          extraPoints += ((rollsAsNumbersWithoutNulls[i+1] || 0) + (rollsAsNumbersWithoutNulls[i+2] || 0)) // trailing 0s prevent NaN return for incomplete game\n        }else if(char==='/'){\n          extraPoints += (rollsAsNumbersWithoutNulls[i+1] || 0) // trailing 0s prevent NaN return for incomplete game\n        }\n      })\n\n      const nonBonusRolls = rollsAsNumbers.slice(0,nonBonusFramesCount) // .splice(0,18) good for strike on 18, otherwise .splice(0,20)\n      return nonBonusRolls.reduce((sum, current)=>sum+current) + extraPoints\n\n    }else{return message}\n\n    function filterOutNulls(char){\n      return !!char || char===0\n    }\n  }\n\n  sumAllFrames = (message = 'Start Game') => {\n    const framesToCount = this.props.rolls[18]==='X' ? 19 : 20\n    return this.sumFrames(framesToCount, message)\n  }\n\n  directFocusToChild = (e) => {\n    let rolls = []\n    e.target.querySelectorAll('.roll input').forEach(input=>rolls.push(input.value))\n    if(rolls.length===21){\n      rolls = rolls.map((roll,i)=>{\n        if( ((i%2===0 || i===19) && roll.match(/[0-9x]/i) ) || // only the first throw/roll of each frame can have a strike X except the last frame\n        ((i%2===1) && roll.match(/[0-9/]/)) // 2nd throws/rolls of each frames can have spares / but not strikes X\n      ){return roll}\n      else{return ''}\n      })\n      rolls = rolls.filter((roll, i) => roll || rolls[i+1])\n      const lastNumber = rolls[rolls.length-1]\n      let nextRollIndex;\n      if(rolls.length >= 20){ nextRollIndex = 20 }\n      else if(lastNumber && lastNumber.match(/X/i)){ nextRollIndex = rolls.length + 1 }\n      else{ nextRollIndex = rolls.length}\n      // // let nextRollIndex = (lastNumber && lastNumber.match(/X/i)) ? rolls.length + 1 : rolls.length\n      // if(nextRollIndex>20){nextRollIndex=20}\n\n      this[`roll-${this.props.id}-${nextRollIndex}`].focus()\n    }\n  }\n\n  determineNextFocus = (e, lastNumber) => {\n    if(!lastNumber.match(/[0-9x/]/i)){return}\n    const ids = e.target.id.split('-')\n    const rollIndex = parseInt(ids[2])\n    const playerIndex = parseInt(ids[1])\n    if(rollIndex>=18){this.determineNextFocusLastFrame(e, lastNumber)}\n    else if(rollIndex%2===1 || lastNumber.toUpperCase()==='X'){\n      const nextPlayer = document.querySelector(`#player-${playerIndex + 1}`)\n      if(nextPlayer){nextPlayer.click()}\n      else(document.querySelector(\"#player-0\").click())\n    }else{\n      this[`roll-${playerIndex}-${rollIndex+1}`].focus()\n    }\n  }\n  \n  determineNextFocusLastFrame = (e, lastNumber) => {\n    const ids = e.target.id.split('-')\n    const rollIndex = parseInt(ids[2])\n    const playerIndex = parseInt(ids[1])\n\n    if( rollIndex === 18 || (rollIndex===19 && (lastNumber.match(/\\//) || this.props.rolls[18].match(/X/i)))){\n      this[`roll-${playerIndex}-${rollIndex + 1}`].focus()\n    }else{\n      const nextPlayer = document.querySelector(`#player-${playerIndex + 1}`)\n      if(nextPlayer){nextPlayer.click()}\n      else(document.querySelector(\"#player-0\")).click()   \n    }\n  }\n\n  // isGameFinished = () => {\n  //   const rolls = this.props.rolls\n  //   return (\n  //     rolls[20] || (rolls[19] && rolls[19]!=='/' &&\n  //     rolls[18] && rolls[18]!=='X')\n  //   )\n  // }\n\n  // saveGame = () => {\n  //   fetch(`${URL}/bowling`,{\n  //     method: 'POST',\n  //     headers: HEADERS,\n  //     body: JSON.stringify({\n  //       name: 'James',\n  //       total: '100'\n  //     })\n  //   })\n  //   .then(r => r.json())\n  //   .then(r => console.log(r))\n  // }\n\n  handleDeletePlayer = () => {\n    this.setState({className:'player off'})\n    setTimeout(()=>this.props.handleDeletePlayer(this.props.id), 1000)\n  }\n\n  render(){\n    console.log(React.version)\n    return(\n      <div className={this.state.className} onClick={this.directFocusToChild} id={`player-${this.props.id}`}>\n        <input value={this.props.playerName} name='nameInput' id={`name-${this.props.id}`} className='nameInput'\n        onChange={this.props.handleNameChange} placeholder={`Player ${this.props.id+1}`} ref={input => this[`name-${this.props.id}`] = input} \n        autoFocus\n        />\n        <button onClick={this.handleDeletePlayer}>Delete {this.props.playerName}</button>\n        <button className='clearScoreButton' onClick={() => this.props.clearScore(this.props.id)}>Clear Score</button>\n        <div className='playerGame'>\n          {this.createFrames()}\n          <span className='sum'>\n            <p>{this.sumAllFrames()}</p>\n            {/* {this.isGameFinished() ? <button onClick={this.saveGame}>Save Game</button> : null } */}\n          </span>\n          {this.props.rolls.slice((this.props.rolls.length + 1) / 2).map((unused, i)=>{\n            const sumFramesFunction = (i === 9) ? this.sumAllFrames('-') : this.sumFrames(i*2+2, '-')\n            return <div key={i} id={i}>{!!this.props.rolls[i*2] ? sumFramesFunction : '-'}</div>\n          })}\n        </div>\n      </div>\n    )\n  }\n}","import React from 'react'\nimport Player from './Player'\n// import {URL} from '../constants'\n\nvar _ = require('lodash');\n\nexport default class Game extends React.Component{\n\n  makeAllRolls = () => { // makes all possible throws,all are ''\n    const rolls = []\n    for(let i=0;i<(10*2)+1;i++){ rolls.push('') } // 10 frames of 2 throws/rolls max, plus 2 extra at the end\n    return [...rolls]\n  }\n\n  newPlayer = (name = '') => ({name:name,rolls:this.makeAllRolls(),id:Math.random()})\n\n  state = {\n    players: [\n      _.cloneDeep(this.newPlayer('Tejal')),\n      _.cloneDeep(this.newPlayer('Nick'))\n    ],\n    autoAdvance: true,\n    in: true\n    // leaderBoard: []\n  }\n\n  componentDidMount = () => {\n    // fetch(`${URL}/bowling`)\n    // .then(r=>r.json())\n    // .then(r => {\n    //   if(r.length > 0 && r[0].name){\n    //     this.setState({leaderBoard: r})\n    //   }\n    // })\n    setTimeout(500, ()=>this.setState({display:true}))\n  }\n\n  handleAddPlayer = () => {\n    const playersCopy = [...this.state.players] // only shallow copy needed\n    playersCopy.push(_.cloneDeep(this.newPlayer()))\n    this.setState({players: playersCopy})\n  }\n\n  handleNameChange = (e) => {\n    const index = parseInt(e.target.id.split('-')[1])\n    const playersCopy = _.cloneDeep(this.state.players) // deep copy needed\n    playersCopy[index].name = e.target.value\n    this.setState({players: playersCopy})\n  }\n\n  handleDeletePlayer = (index) => {\n    const playersCopy = [...this.state.players]\n    playersCopy.splice(index, 1)\n    this.setState({players: playersCopy})\n  }\n\n  // updates a throw by number to the number of pins knocked down, or x or /\n  handleUpdateRoll = (e) => { // keyDown eventListeners don't work on Android\n    const lastNumber = e.target.value[e.target.value.length -1] || '' // the '' is for delete button\n    const id = e.target.id.split('-')\n    const playerIndex = parseInt(id[1])\n    const rollIndex = parseInt(id[2])\n    const isAcceptableRollInput = this.isAcceptableRollInput(playerIndex, rollIndex, lastNumber)\n    if(isAcceptableRollInput) {\n      const playersCopy = _.cloneDeep(this.state.players)\n      playersCopy[playerIndex].rolls[rollIndex] = lastNumber.toUpperCase()\n      this.setState({players: playersCopy})\n    }\n    return(isAcceptableRollInput)\n  }\n\n  isAcceptableRollInput = (playerIndex, rollIndex, lastNumber) => { // considering putting each of these in their own functions, as well, for clarity\n    const rolls = this.state.players[playerIndex].rolls\n\n    // DELETE\n    if(lastNumber===''){return true}\n\n    // FIRST 9 FRAMES, FIRST THROW OF 10th FRAME\n    if(rollIndex<19){\n      if(rollIndex%2===1 && rolls[rollIndex-1]!=='X'){ // 2nd roll in frame, cannot exist if first roll is strike\n        if(!!parseInt(lastNumber) || lastNumber==='0'){ // if lastNumber is a digit\n          return ( (parseInt(lastNumber) + parseInt(rolls[rollIndex-1]) < 10) ) // two digits <= 9, otherwise it must be spare. Automatically rejects any digits after X because X + digit is NaN\n        }else{ return lastNumber==='/' } // 2nd roll can only be a spare or a digit (above)\n      }else if(rollIndex%2===0){ return lastNumber.match(/[0-9x]/i)} // first roll in frame\n\n    // 10th FRAME, 2nd THROW\n    }else if(rollIndex===19){\n      if(rolls[18]==='X'){return lastNumber.match(/[0-9x]/i)} // if 10th frame 1st roll is strike, 2nd roll must be digit or strike\n      else{ // if 10th frame 1st roll is NOT strike\n        if(lastNumber==='/'){return true} // can be a spare\n        else{ // is digit and not more than 9\n          return lastNumber.match(/[0-9]/) && (parseInt(lastNumber) + parseInt(rolls[rollIndex-1]) < 10)\n        }\n      } \n    // 10th FRAME, 3rd THROW\n    }else if(rollIndex===20){ // 10th frame, 3rd throw\n      if(rolls[19]==='/'){ // if 10th frame, 2nd throw is a spare\n        return lastNumber.match(/[0-9x]/i) // can only be a digit or strike\n      }else if (rolls[18]==='X'){ // if 10th frame, 1st throw is a strike, you get a 3rd throw\n        if(rolls[19]==='X'){ // if 10th frame, 2nd throw is a strike\n          return lastNumber.match(/[0-9x]/i) // it can be a digit or a spare\n        }else{ // 10th frame, 2nd throw is not a strike nor a spare (above)\n          return (parseInt(lastNumber) + parseInt(rolls[rollIndex-1]) < 10)\n        }\n      }\n    }\n\n    // ALL ELSE\n    return false\n  }\n\n  addPlayerButton = <button onClick={this.handleAddPlayer} className='addPlayerButton'>Add Player</button>\n\n  toggleAutoAdvance = () => this.setState({autoAdvance: !this.state.autoAdvance})\n\n  clearScore = (playerIndex) => {\n    const playersCopy = _.cloneDeep(this.state.players)\n    playersCopy[playerIndex].rolls = this.makeAllRolls()\n    this.setState({players: playersCopy})\n  }\n\n  random = () => {\n    return Math.random()\n  }\n\n  render(){\n    return(\n      <div className='game'>\n        {this.addPlayerButton}\n        <span className='autoAdvanceContainer' onClick={this.toggleAutoAdvance}>\n          <p>Auto-Advance</p>\n          <input type='checkbox' checked={this.state.autoAdvance} onChange={this.toggleAutoAdvance} />\n          <span><span/></span>\n        </span>\n        {this.state.players.map((player, i)=>(\n            < Player playerName={player.name} rolls={player.rolls} key={player.id} id={i} \n              handleNameChange={this.handleNameChange} handleDeletePlayer={this.handleDeletePlayer}\n              handleUpdateRoll={this.handleUpdateRoll} autoAdvance={this.state.autoAdvance}\n              clearScore={this.clearScore}\n            />\n          )\n        )}\n        {this.state.players.length > 3 ? this.addPlayerButton : null}\n        {/* {this.state.leaderBoard[0] ? this.state.leaderBoard.map(game=>{\n          return <p>{`${game.name} - ${game.total}`}</p>\n        }) : null} */}\n      </div>\n    )\n  }\n\n}","import React from 'react';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1>Bowling Score</h1>\n      <div className='instructions'>\n        <h2>Scoring Rules</h2>\n        <p>Each \"frame\" is two attempts (\"throws\") to knock down the 10 pins. A game has 10 frames.</p>\n        <table>\n        <tbody>\n          <tr>\n            <th>Name</th><th>Symbol</th><th>Meaning</th><th>Scoring</th>\n          </tr>\n          <tr>\n            <td>Strike</td><td>X</td><td>You knocked down all 10 pins on the first throw of a frame.</td><td>10 + the number of pins knocked down on your next 2 throws</td>\n          </tr>\n          <tr>\n            <td>Spare</td><td>/</td><td>You knocked down all 10 pins using both throws of the frame.</td><td>10 for the frame + the number of pins knocked down on your next throw</td>\n          </tr>\n          <tr>\n            <td></td><td>0-9</td><td>You knocked down this many pins, <b>not</b> all the pins</td><td>The number of pins you knocked down</td>\n          </tr>\n        </tbody>\n        </table>\n      </div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}